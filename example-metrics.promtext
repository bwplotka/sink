# HELP go_gc_duration_seconds A summary of the wall-time pause (stop-the-world) duration in garbage collection cycles.
# TYPE go_gc_duration_seconds summary
go_gc_duration_seconds{quantile="0"} 0.000227585
go_gc_duration_seconds{quantile="0.25"} 0.00046021
go_gc_duration_seconds{quantile="0.5"} 0.001317382
go_gc_duration_seconds{quantile="0.75"} 0.00423561
go_gc_duration_seconds{quantile="1"} 0.027777559
go_gc_duration_seconds_sum 0.10345449
go_gc_duration_seconds_count 34
# HELP go_gc_gogc_percent Heap size target percentage configured by the user, otherwise 100. This value is set by the GOGC environment variable, and the runtime/debug.SetGCPercent function. Sourced from /gc/gogc:percent.
# TYPE go_gc_gogc_percent gauge
go_gc_gogc_percent 100
# HELP go_gc_gomemlimit_bytes Go runtime memory limit configured by the user, otherwise math.MaxInt64. This value is set by the GOMEMLIMIT environment variable, and the runtime/debug.SetMemoryLimit function. Sourced from /gc/gomemlimit:bytes.
# TYPE go_gc_gomemlimit_bytes gauge
go_gc_gomemlimit_bytes 9.223372036854776e+18
# HELP go_goroutines Number of goroutines that currently exist.
# TYPE go_goroutines gauge
go_goroutines 12
# HELP go_info Information about the Go environment.
# TYPE go_info gauge
go_info{version="go1.23.2"} 1
# HELP go_memstats_alloc_bytes Number of bytes allocated in heap and currently in use. Equals to /memory/classes/heap/objects:bytes.
# TYPE go_memstats_alloc_bytes gauge
go_memstats_alloc_bytes 1.412264e+06
# HELP go_memstats_alloc_bytes_total Total number of bytes allocated in heap until now, even if released already. Equals to /gc/heap/allocs:bytes.
# TYPE go_memstats_alloc_bytes_total counter
go_memstats_alloc_bytes_total 7.1658128e+07
# HELP go_memstats_buck_hash_sys_bytes Number of bytes used by the profiling bucket hash table. Equals to /memory/classes/profiling/buckets:bytes.
# TYPE go_memstats_buck_hash_sys_bytes gauge
go_memstats_buck_hash_sys_bytes 3772
# HELP go_memstats_frees_total Total number of heap objects frees. Equals to /gc/heap/frees:objects + /gc/heap/tiny/allocs:objects.
# TYPE go_memstats_frees_total counter
go_memstats_frees_total 1.057225e+06
# HELP go_memstats_gc_sys_bytes Number of bytes used for garbage collection system metadata. Equals to /memory/classes/metadata/other:bytes.
# TYPE go_memstats_gc_sys_bytes gauge
go_memstats_gc_sys_bytes 2.79348e+06
# HELP go_memstats_heap_alloc_bytes Number of heap bytes allocated and currently in use, same as go_memstats_alloc_bytes. Equals to /memory/classes/heap/objects:bytes.
# TYPE go_memstats_heap_alloc_bytes gauge
go_memstats_heap_alloc_bytes 1.412264e+06
# HELP go_memstats_heap_idle_bytes Number of heap bytes waiting to be used. Equals to /memory/classes/heap/released:bytes + /memory/classes/heap/free:bytes.
# TYPE go_memstats_heap_idle_bytes gauge
go_memstats_heap_idle_bytes 5.12e+06
# HELP go_memstats_heap_inuse_bytes Number of heap bytes that are in use. Equals to /memory/classes/heap/objects:bytes + /memory/classes/heap/unused:bytes
# TYPE go_memstats_heap_inuse_bytes gauge
go_memstats_heap_inuse_bytes 2.678784e+06
# HELP go_memstats_heap_objects Number of currently allocated objects. Equals to /gc/heap/objects:objects.
# TYPE go_memstats_heap_objects gauge
go_memstats_heap_objects 16053
# HELP go_memstats_heap_released_bytes Number of heap bytes released to OS. Equals to /memory/classes/heap/released:bytes.
# TYPE go_memstats_heap_released_bytes gauge
go_memstats_heap_released_bytes 3.268608e+06
# HELP go_memstats_heap_sys_bytes Number of heap bytes obtained from system. Equals to /memory/classes/heap/objects:bytes + /memory/classes/heap/unused:bytes + /memory/classes/heap/released:bytes + /memory/classes/heap/free:bytes.
# TYPE go_memstats_heap_sys_bytes gauge
go_memstats_heap_sys_bytes 7.798784e+06
# HELP go_memstats_last_gc_time_seconds Number of seconds since 1970 of last garbage collection.
# TYPE go_memstats_last_gc_time_seconds gauge
go_memstats_last_gc_time_seconds 1.7295938665719981e+09
# HELP go_memstats_mallocs_total Total number of heap objects allocated, both live and gc-ed. Semantically a counter version for go_memstats_heap_objects gauge. Equals to /gc/heap/allocs:objects + /gc/heap/tiny/allocs:objects.
# TYPE go_memstats_mallocs_total counter
go_memstats_mallocs_total 1.073278e+06
# HELP go_memstats_mcache_inuse_bytes Number of bytes in use by mcache structures. Equals to /memory/classes/metadata/mcache/inuse:bytes.
# TYPE go_memstats_mcache_inuse_bytes gauge
go_memstats_mcache_inuse_bytes 2400
# HELP go_memstats_mcache_sys_bytes Number of bytes used for mcache structures obtained from system. Equals to /memory/classes/metadata/mcache/inuse:bytes + /memory/classes/metadata/mcache/free:bytes.
# TYPE go_memstats_mcache_sys_bytes gauge
go_memstats_mcache_sys_bytes 15600
# HELP go_memstats_mspan_inuse_bytes Number of bytes in use by mspan structures. Equals to /memory/classes/metadata/mspan/inuse:bytes.
# TYPE go_memstats_mspan_inuse_bytes gauge
go_memstats_mspan_inuse_bytes 74720
# HELP go_memstats_mspan_sys_bytes Number of bytes used for mspan structures obtained from system. Equals to /memory/classes/metadata/mspan/inuse:bytes + /memory/classes/metadata/mspan/free:bytes.
# TYPE go_memstats_mspan_sys_bytes gauge
go_memstats_mspan_sys_bytes 97920
# HELP go_memstats_next_gc_bytes Number of heap bytes when next garbage collection will take place. Equals to /gc/heap/goal:bytes.
# TYPE go_memstats_next_gc_bytes gauge
go_memstats_next_gc_bytes 4.194304e+06
# HELP go_memstats_other_sys_bytes Number of bytes used for other system allocations. Equals to /memory/classes/other:bytes.
# TYPE go_memstats_other_sys_bytes gauge
go_memstats_other_sys_bytes 455132
# HELP go_memstats_stack_inuse_bytes Number of bytes obtained from system for stack allocator in non-CGO environments. Equals to /memory/classes/heap/stacks:bytes.
# TYPE go_memstats_stack_inuse_bytes gauge
go_memstats_stack_inuse_bytes 589824
# HELP go_memstats_stack_sys_bytes Number of bytes obtained from system for stack allocator. Equals to /memory/classes/heap/stacks:bytes + /memory/classes/os-stacks:bytes.
# TYPE go_memstats_stack_sys_bytes gauge
go_memstats_stack_sys_bytes 589824
# HELP go_memstats_sys_bytes Number of bytes obtained from system. Equals to /memory/classes/total:byte.
# TYPE go_memstats_sys_bytes gauge
go_memstats_sys_bytes 1.1754512e+07
# HELP go_sched_gomaxprocs_threads The current runtime.GOMAXPROCS setting, or the number of operating system threads that can execute user-level Go code simultaneously. Sourced from /sched/gomaxprocs:threads.
# TYPE go_sched_gomaxprocs_threads gauge
go_sched_gomaxprocs_threads 2
# HELP go_threads Number of OS threads created.
# TYPE go_threads gauge
go_threads 8
# HELP http_request_duration_seconds Tracks the latencies for HTTP requests.
# TYPE http_request_duration_seconds histogram
http_request_duration_seconds_bucket{code="204",handler="/sink/prw",method="post",le="+Inf"} 116
http_request_duration_seconds_sum{code="204",handler="/sink/prw",method="post"} 2.111324667999999
http_request_duration_seconds_count{code="204",handler="/sink/prw",method="post"} 116
# HELP http_request_size_bytes Tracks the size of HTTP requests.
# TYPE http_request_size_bytes histogram
http_request_size_bytes_bucket{code="204",handler="/sink/prw",method="post",le="0"} 0
http_request_size_bytes_bucket{code="204",handler="/sink/prw",method="post",le="200"} 0
http_request_size_bytes_bucket{code="204",handler="/sink/prw",method="post",le="1024"} 0
http_request_size_bytes_bucket{code="204",handler="/sink/prw",method="post",le="2048"} 0
http_request_size_bytes_bucket{code="204",handler="/sink/prw",method="post",le="10240"} 0
http_request_size_bytes_bucket{code="204",handler="/sink/prw",method="post",le="+Inf"} 116
http_request_size_bytes_sum{code="204",handler="/sink/prw",method="post"} 1.954755e+06
http_request_size_bytes_count{code="204",handler="/sink/prw",method="post"} 116
# HELP http_requests_total Tracks the number of HTTP requests.
# TYPE http_requests_total counter
http_requests_total{code="204",handler="/sink/prw",method="post"} 116
# HELP http_response_size_bytes Tracks the size of HTTP responses.
# TYPE http_response_size_bytes histogram
http_response_size_bytes_bucket{code="204",handler="/sink/prw",method="post",le="+Inf"} 116
http_response_size_bytes_sum{code="204",handler="/sink/prw",method="post"} 0
http_response_size_bytes_count{code="204",handler="/sink/prw",method="post"} 116
# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.
# TYPE process_cpu_seconds_total counter
process_cpu_seconds_total 0
# HELP process_max_fds Maximum number of open file descriptors.
# TYPE process_max_fds gauge
process_max_fds 1.048576e+06
# HELP process_network_receive_bytes_total Number of bytes received by the process over the network.
# TYPE process_network_receive_bytes_total counter
process_network_receive_bytes_total 1.993173e+06
# HELP process_network_transmit_bytes_total Number of bytes sent by the process over the network.
# TYPE process_network_transmit_bytes_total counter
process_network_transmit_bytes_total 47076
# HELP process_open_fds Number of open file descriptors.
# TYPE process_open_fds gauge
process_open_fds 10
# HELP process_resident_memory_bytes Resident memory size in bytes.
# TYPE process_resident_memory_bytes gauge
process_resident_memory_bytes 0
# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.
# TYPE process_start_time_seconds gauge
process_start_time_seconds 1.72959362972e+09
# HELP process_virtual_memory_bytes Virtual memory size in bytes.
# TYPE process_virtual_memory_bytes gauge
process_virtual_memory_bytes 0
# HELP process_virtual_memory_max_bytes Maximum amount of virtual memory available in bytes.
# TYPE process_virtual_memory_max_bytes gauge
process_virtual_memory_max_bytes 1.8446744073709552e+19
# HELP sink_received_data_elements
# TYPE sink_received_data_elements histogram
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="0"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="5"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="10"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="50"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="100"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="1000"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="2000"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="10000"} 56
sink_received_data_elements_bucket{data="exemplars",proto="io.prometheus.write.v2.Request",le="+Inf"} 56
sink_received_data_elements_sum{data="exemplars",proto="io.prometheus.write.v2.Request"} 0
sink_received_data_elements_count{data="exemplars",proto="io.prometheus.write.v2.Request"} 56
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="0"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="5"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="10"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="50"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="100"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="1000"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="2000"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="10000"} 60
sink_received_data_elements_bucket{data="exemplars",proto="prometheus.WriteRequest",le="+Inf"} 60
sink_received_data_elements_sum{data="exemplars",proto="prometheus.WriteRequest"} 0
sink_received_data_elements_count{data="exemplars",proto="prometheus.WriteRequest"} 60
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="0"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="5"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="10"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="50"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="100"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="1000"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="2000"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="10000"} 56
sink_received_data_elements_bucket{data="histograms",proto="io.prometheus.write.v2.Request",le="+Inf"} 56
sink_received_data_elements_sum{data="histograms",proto="io.prometheus.write.v2.Request"} 0
sink_received_data_elements_count{data="histograms",proto="io.prometheus.write.v2.Request"} 56
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="0"} 4
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="5"} 4
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="10"} 6
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="50"} 60
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="100"} 60
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="1000"} 60
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="2000"} 60
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="10000"} 60
sink_received_data_elements_bucket{data="histograms",proto="prometheus.WriteRequest",le="+Inf"} 60
sink_received_data_elements_sum{data="histograms",proto="prometheus.WriteRequest"} 661
sink_received_data_elements_count{data="histograms",proto="prometheus.WriteRequest"} 60
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="0"} 0
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="5"} 0
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="10"} 0
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="50"} 0
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="100"} 0
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="1000"} 56
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="2000"} 56
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="10000"} 56
sink_received_data_elements_bucket{data="samples",proto="io.prometheus.write.v2.Request",le="+Inf"} 56
sink_received_data_elements_sum{data="samples",proto="io.prometheus.write.v2.Request"} 37094
sink_received_data_elements_count{data="samples",proto="io.prometheus.write.v2.Request"} 56
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="0"} 0
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="5"} 0
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="10"} 0
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="50"} 0
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="100"} 0
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="1000"} 56
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="2000"} 56
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="10000"} 56
sink_received_data_elements_bucket{data="samples",proto="prometheus.WriteRequest",le="+Inf"} 56
sink_received_data_elements_sum{data="samples",proto="prometheus.WriteRequest"} 37094
sink_received_data_elements_count{data="samples",proto="prometheus.WriteRequest"} 56
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="0"} 0
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="5"} 0
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="10"} 0
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="50"} 0
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="100"} 0
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="1000"} 56
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="2000"} 56
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="10000"} 56
sink_received_data_elements_bucket{data="series",proto="io.prometheus.write.v2.Request",le="+Inf"} 56
sink_received_data_elements_sum{data="series",proto="io.prometheus.write.v2.Request"} 37094
sink_received_data_elements_count{data="series",proto="io.prometheus.write.v2.Request"} 56
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="0"} 4
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="5"} 4
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="10"} 4
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="50"} 4
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="100"} 4
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="1000"} 60
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="2000"} 60
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="10000"} 60
sink_received_data_elements_bucket{data="series",proto="prometheus.WriteRequest",le="+Inf"} 60
sink_received_data_elements_sum{data="series",proto="prometheus.WriteRequest"} 37755
sink_received_data_elements_count{data="series",proto="prometheus.WriteRequest"} 60
